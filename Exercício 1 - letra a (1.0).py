#---------------------------------------------------------------------------#
#Rafael Perrotta
#Otimização de Sistemas
#---------------------------------------------------------------------------#
#https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html
#https://realpython.com/linear-programming-python/
#---------------------------------------------------------------------------#
"""
#---------------------------------------------------------------------------#
Modelo de programação linear:
Maximizar: z = 4000x[1] + 1800x[2] + 5000x[3] + 4000x[4] + 1800x[5] + 5000x[6] + 4000x[7] + 1800x[8] + 5000x[9]
Minimizar: z * (- 1) = 4000 * (- 1) * x[1]
                     + 1800 * (- 1) * x[2]
                     + 5000 * (- 1) * x[3]
                     + 4000 * (- 1) * x[4]
                     + 1800 * (- 1) * x[5]
                     + 5000 * (- 1) * x[6]
                     + 4000 * (- 1) * x[7]
                     + 1800 * (- 1) * x[8]
                     + 5000 * (- 1) * x[9]
Minimizar: - z = - 4000x[1] - 1800x[2] - 5000x[3] - 4000x[4] - 1800x[5] - 5000x[6] - 4000x[7] - 1800x[8] - 5000x[9]
{sujeito a:}
1x[1] + 1x[2] + 1x[3] + 0x[4] + 0x[5] + 0x[6] + 0x[7] + 0x[8] + 0x[9] ≤ 400
0x[1] + 0x[2] + 0x[3] + 1x[4] + 1x[5] + 1x[6] + 0x[7] + 0x[8] + 0x[9] ≤ 650
0x[1] + 0x[2] + 0x[3] + 0x[4] + 0x[5] + 0x[6] + 1x[7] + 1x[8] + 1x[9] ≤ 350
4x[1] + 3.5x[2] + 5.5x[3] + 0x[4] + 0x[5] + 0x[6] + 0x[7] + 0x[8] + 0x[9] ≤ 1800
0x[1] + 0x[2] + 0x[3] + 4x[4] + 3.5x[5] + 5.5x[6] + 0x[7] + 0x[8] + 0x[9] ≤ 2200
0x[1] + 0x[2] + 0x[3] + 0x[4] + 0x[5] + 0x[6] + 4x[7] + 3.5x[8] + 5.5x[9] ≤ 950
1x[1] + 0x[2] + 0x[3] + 1x[4] + 0x[5] + 0x[6] + 1x[7] + 0x[8] + 0x[9] ≤ 880
0x[1] + 1x[2] + 0x[3] + 0x[4] + 1x[5] + 0x[6] + 0x[7] + 1x[8] + 0x[9] ≤ 400
0x[1] + 0x[2] + 1x[3] + 0x[4] + 0x[5] + 1x[6] + 0x[7] + 0x[8] + 1x[9] ≤ 660
13x[1] + 13x[2] + 13x[3] - 8x[4] - 8x[5] - 8x[6] + 0x[7] + 0x[8] + 0x[9] = 0
7x[1] + 7x[2] + 7x[3] + 0x[4] + 0x[5] + 0x[6] - 8x[7] - 8x[8] - 8x[9] = 0
0x[1] + 0x[2] + 0x[3] + 7x[4] + 7x[5] + 7x[6] - 13x[7] - 13x[8] - 13x[9] = 0
x[1] ≥ 0
x[2] ≥ 0
x[3] ≥ 0
x[4] ≥ 0
x[5] ≥ 0
x[6] ≥ 0
x[7] ≥ 0
x[8] ≥ 0
x[9] ≥ 0
x[i] ∈ R+ {i = 1; 2; 3; 4; 5; 6; 7; 8; 9}
#---------------------------------------------------------------------------#
"""
#---------------------------------------------------------------------------#
#Libraries/Modules
import numpy as np
from numpy.linalg import solve
import scipy as sp
from scipy.optimize import linprog
#---------------------------------------------------------------------------#
def ResolverPL(c, A_ub, b_ub, A_eq, b_eq):
    res = linprog(c, A_ub = A_ub, b_ub = b_ub, A_eq = A_eq, b_eq = b_eq, bounds = (0, None), method = 'highs-ds')
    return res
#---------------------------------------------------------------------------#
def Exemplo1():
    c = np.array([- 4000, - 1800, - 5000, - 4000, - 1800, - 5000, - 4000, - 1800, - 5000])
    A_ub = np.array([[1, 1, 1, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 1, 1, 1, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 1, 1, 1],
                     [4, 3.5, 5.5, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 4, 3.5, 5.5, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 4, 3.5, 5.5],
                     [1, 0, 0, 1, 0, 0, 1, 0, 0],
                     [0, 1, 0, 0, 1, 0, 0, 1, 0],
                     [0, 0, 1, 0, 0, 1, 0, 0, 1]])
    b_ub = np.array([400, 650, 350, 1800, 2200, 950, 880, 400, 660])
    A_eq = np.array([[13, 13, 13, - 8, - 8, - 8, 0, 0, 0],
                     [7, 7, 7, 0, 0, 0, - 8, - 8, - 8],
                     [0, 0, 0, 7, 7, 7, - 13, - 13, - 13]])
    b_eq = np.array([0, 0, 0])
    return c, A_ub, b_ub, A_eq, b_eq
#---------------------------------------------------------------------------#
[c, A_ub, b_ub, A_eq, b_eq] = Exemplo1()
#---------------------------------------------------------------------------#
resultado = ResolverPL(c, A_ub, b_ub, A_eq, b_eq)
#---------------------------------------------------------------------------#
nelen = len(resultado.x)
#---------------------------------------------------------------------------#
print("#---------------------------------------------------------------------------#")
print("Status =", resultado.status)
print("Status =", resultado.message)
print("#---------------------------------------------------------------------------#")
print("Solução Ótima")
print("#---------------------------------------------------------------------------#")
print("Variável de Decisão")
for i in range(nelen):
    print("x[", i + 1,"] =", resultado.x[i])
print("#---------------------------------------------------------------------------#")
print("Função Objetivo")
print("Valor Ótimo")
print("Maximizar: z =", resultado.fun * (- 1))
print("#---------------------------------------------------------------------------#")
#---------------------------------------------------------------------------#
